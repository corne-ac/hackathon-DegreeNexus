generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Tag {
  id       String @id @default(uuid())
  name     String @db.VarChar(50)
  degreeId String
  degree   Degree @relation(fields: [degreeId], references: [id])
}

model Link {
  id        String  @id @default(uuid())
  link      String  @db.VarChar(255)
  degreeId  String?
  linktitle String  @db.VarChar(255)
  Degree    Degree? @relation(fields: [degreeId], references: [id])
}

model University {
  id          String   @id @default(uuid())
  name        String   @db.VarChar(50)
  link        String?  @db.VarChar(255)
  description String?  @db.VarChar(5000)
  photo       String?  @default("default.png")
  Campus      Campus[]
  Degree      Degree[]
}

model Campus {
  id           String     @id @default(uuid())
  title        String     @db.VarChar(50)
  link         String?    @db.VarChar(255)
  universityId String
  university   University @relation(fields: [universityId], references: [id])
}

model Degree {
  id           String     @id @default(uuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  title        String     @db.VarChar(50)
  description  String?    @db.VarChar(5000)
  requirements String?    @db.VarChar(255)
  level        String?    @db.VarChar(255)
  photo        String?    @default("default.png")
  universityId String
  University   University @relation(fields: [universityId], references: [id])
  links        Link[]
  tags         Tag[]
  favoritedBy  User[]     @relation("Favorites")
  posts        Post[]

  @@index([id])
}

model User {
  id              String    @id @unique @default(uuid())
  name            String
  email           String    @unique
  password        String
  role            String?   @default("user")
  photo           String?   @default("default.png")
  verified        Boolean?  @default(false)
  createdAt       DateTime? @default(now())
  updatedAt       DateTime? @updatedAt
  favoriteDegrees Degree[]  @relation("Favorites")
  Post            Post[]

  @@index([id])
}

model Post {
  id       String @id @default(uuid())
  user     User   @relation(fields: [userId], references: [id])
  degree   Degree @relation(fields: [degreeId], references: [id])
  degreeId String
  userId   String
  stars    Int
  comment  String @db.VarChar(5000)
}
